# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: ListNode) -> ListNode:
        pointer = head
        l1 = ListNode()
        temp = l1
        if head is None:
            return head
        while pointer:
            if pointer.next is None:
                break
            temp.next = ListNode(pointer.val)
            pointer = pointer.next.next
            temp = temp.next
        
        print('current node: ', temp)
        print('pointer', pointer)
        if pointer is not None:
            temp.next = ListNode(pointer.val)
            temp = temp.next
            
        pointer = head.next
        while pointer:
            if pointer.next is None:
                break
            temp.next = ListNode(pointer.val)
            pointer = pointer.next.next
            temp = temp.next
        print(pointer)
        if pointer is not None:
            temp.next = ListNode(pointer.val)
        
        return l1.next
    
    
    // Time: O(n2)
    //  Space: O(n)
    
